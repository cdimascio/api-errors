{
  "name": "cdimascio/api-errors",
  "version": "0.1.4",
  "libraries": {
    "xv": "^1.1.25"
  },
  "title": "",
  "branch": "",
  "style": {
    "name": "Default",
    "componentSet": {
      "nav": "nav/BasicNav",
      "header": "header/BannerHeader",
      "article": "article/BasicArticle",
      "footer": "footer/BasicFooter"
    },
    "fontFamily": "-apple-system, BlinkMacSystemFont, sans-serif",
    "fontWeight": 400,
    "bold": 600,
    "lineHeight": 1.5,
    "typeScale": [
      72,
      48,
      24,
      20,
      16,
      14,
      12
    ],
    "monospace": "Menlo, monospace",
    "heading": {
      "fontFamily": null,
      "fontStyle": null,
      "fontWeight": 600,
      "lineHeight": 1.25,
      "textTransform": null,
      "letterSpacing": null
    },
    "h0": {},
    "h1": {},
    "h2": {},
    "h3": {},
    "h4": {},
    "h5": {},
    "h6": {},
    "alternativeText": {},
    "space": [
      0,
      8,
      16,
      32,
      48,
      64,
      96
    ],
    "layout": {
      "maxWidth": 1024,
      "centered": false
    },
    "colors": {
      "text": "#111",
      "background": "#fff",
      "primary": "#08e",
      "secondary": "#059",
      "highlight": "#e08",
      "border": "#ddd",
      "muted": "#eee"
    },
    "border": {
      "width": 1,
      "radius": 2
    },
    "link": {},
    "button": {
      "hover": {
        "boxShadow": "inset 0 0 0 999px rgba(0, 0, 0, .125)"
      }
    },
    "input": {},
    "body": {
      "margin": 0
    },
    "breakpoints": {
      "xs": "@media screen and (max-width:40em)",
      "sm": "@media screen and (min-width:40em)",
      "md": "@media screen and (min-width:52em)",
      "lg": "@media screen and (min-width:64em)"
    }
  },
  "content": [
    {
      "component": "nav",
      "links": [
        {
          "href": "https://github.com/cdimascio/api-errors",
          "text": "GitHub"
        },
        {
          "href": "https://npmjs.com/package/wcp-errors",
          "text": "npm"
        }
      ]
    },
    {
      "component": "header",
      "heading": "api-errors",
      "subhead": "",
      "children": [
        {
          "component": "ui/TweetButton",
          "text": "api-errors: ",
          "url": null
        },
        {
          "component": "ui/GithubButton",
          "user": "cdimascio",
          "repo": "api-errors"
        }
      ],
      "text": "v1.0.0"
    },
    {
      "component": "article",
      "metadata": {
        "source": "github.readme"
      },
      "html": "\n<p>Package for normalizing api errors using the following format:</p>\n<p><img src=\"https://github.com/cdimascio/wcp-errors/blob/master/assets/error.png?raw=true\"></p>\n<h2>Install</h2>\n<pre>npm install wcp-errors</pre><h2>Usage</h2>\n<pre><span class=\"hljs-keyword\">const</span> { notFound } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;wcp-errors&apos;</span>);\n<span class=\"hljs-keyword\">throw</span> badRequest(<span class=\"hljs-string\">&apos;first name is required.&apos;</span>);</pre><h2>Examples (ExpressJS)</h2>\n<pre>app.get(<span class=\"hljs-string\">&apos;/not_found&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res, next</span>) </span>{\n  next(notFound());\n});\n\n<span class=\"hljs-comment\">// Bad request example</span>\napp.get(<span class=\"hljs-string\">&apos;/bad_request&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res, next</span>) </span>{\n  next(\n    badRequest(<span class=\"hljs-string\">&apos;Eek! A bad request&apos;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(), {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&apos;parameter&apos;</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&apos;Eek&apos;</span>,\n    })\n  );\n});\n\n<span class=\"hljs-comment\">// Throw! example</span>\napp.get(<span class=\"hljs-string\">&apos;/throws&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res, next</span>) </span>{\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&apos;Oh noes!&apos;</span>);\n});\n\n<span class=\"hljs-comment\">// Error handler</span>\napp.use(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, req, res, next</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err <span class=\"hljs-keyword\">instanceof</span> ApiError) {\n    res.status(err.statusCode).json(err);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.status(<span class=\"hljs-number\">500</span>).json(internalServerError(err.message, err));\n  }\n});</pre><h2>Run the examples</h2>\n<ul>\n<li><code>cd example/express</code></li>\n<li><code>npm install</code></li>\n<li><code>npm start</code></li>\n</ul>\n<p>Open a browser and run</p>\n<ul>\n<li><a href=\"http://localhost:3000/not_found\">http://localhost:3000/not_found</a></li>\n<li><a href=\"http://localhost:3000/bad_request\">http://localhost:3000/bad_request</a></li>\n<li><a href=\"http://localhost:3000/throws\">http://localhost:3000/throws</a></li>\n</ul>\n<h2>APIs</h2>\n<h3>Raw</h3>\n<p>The raw API is only necessary when multiple errors are to be returned in the wcp error response. For scenarios where a single error is to be returned, use the <a href=\"#basic\">Basic</a> Apis.</p>\n<pre> <span class=\"hljs-keyword\">const</span> { ApiError } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;wcp-errors&apos;</span>);\n\n<span class=\"hljs-comment\">// Manually create a new API error</span>\n<span class=\"hljs-keyword\">const</span> e = <span class=\"hljs-keyword\">new</span> ApiError({\n  <span class=\"hljs-attr\">statusCode</span>: <span class=\"hljs-number\">409</span>,\n  <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">&apos;conflict&apos;</span>,\n  message,\n  error, <span class=\"hljs-comment\">// optional error</span>\n  target, <span class=\"hljs-comment\">// optional target</span>\n});\n\n<span class=\"hljs-comment\">// Add additional errors to the error</span>\ne.add({\n  code = <span class=\"hljs-string\">&apos;error&apos;</span>,\n  message = <span class=\"hljs-string\">&apos;unxepected_error&apos;</span>,\n  target, <span class=\"hljs-comment\">// optional target</span>\n  error <span class=\"hljs-comment\">// optional error object</span>\n})</pre><h3>Basic</h3>\n<p>All basic Apis take the following three <strong><em>optional</em></strong> arguments: </p>\n<ul>\n<li><code>message</code>: a string describing the error</li>\n<li><code>error</code>: an <code>Error</code> object</li>\n<li><code>target</code>: an object with shape <code>{ type, name }</code></li>\n</ul>\n<h3>All APIs</h3>\n<pre>badRequest();\nconflict();\nforbidden();\ninternalServerError();\nmethodNotAllowed();\nnotAcceptable();\nnotFound();\nrequestEntityTooLarge();\nunAuthorized();\nunsupportedMediaType();</pre><h2>TODO</h2>\n<p>Create dedicated Express middleware, such that a user does not have to write the fallback error handler middleware.</p>\n<p>ex:</p>\n<pre>app.use(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, req, res, next</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err <span class=\"hljs-keyword\">instanceof</span> ApiError) {\n    res.status(err.statusCode).json(err);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.status(<span class=\"hljs-number\">500</span>).json(internalServerError(err.message, err));\n  }\n});</pre><h2>License</h2>\n<p>MIT</p>\n"
    },
    {
      "component": "footer",
      "links": [
        {
          "href": "https://github.com/cdimascio/api-errors",
          "text": "GitHub"
        },
        {
          "href": "https://github.com/cdimascio",
          "text": "cdimascio"
        }
      ]
    }
  ]
}